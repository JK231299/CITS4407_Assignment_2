# -------------------------------------------------------------------
# Script Name: analysis
# Description: Analyzes cleaned board game data to:
#   1. Identify the most common game mechanics
#   2. Identify the most common game domain
#   3. Compute correlations between year/complexity and average rating
# Usage:      ./analysis <cleaned_tsv_file>
# Example:    ./analysis bgg_cleaned.tsv
# -------------------------------------------------------------------

#!/usr/bin/env bash


if [[ $# -ne 1 ]]; then
    echo "Usage: $0 <cleaned_file.tsv>" >&2
    exit 1
fi

file=$1

# -------------------------
# Step 1: Most popular game mechanics
# -------------------------
awk -F'\t' '
NR > 1 && $13 != "" {
    n = split($13, mechList, ", ")              # Split mechanics into list
    for (i = 1; i <= n; i++) {
        mech[mechList[i]]++                     # Count occurrences of mechanics
    }
}
END {
    max = 0
    for (m in mech) {
        if (mech[m] > max) {                    # Track max count
            max = mech[m]
            popular = m
        }
    }
    print "The most popular game mechanics is " popular " found in " max " games"
}' "$file"

# -------------------------
# Step 2: Most popular game domain
# -------------------------
awk -F'\t' '
# For each row, split domains and count occurrences
NR > 1 && $14 != "" {
    n = split($14, domList, ", ")               # Split domains into list
    for (i = 1; i <= n; i++) {
        dom[domList[i]]++                       # Count occurrences of domains
    }
}
END {
    max = 0
    for (d in dom) {
        if (dom[d] > max) {                     # Track max count
            max = dom[d]
            popular = d
        }
    }
    print "The most game domain is " popular " found in " max " games"
}' "$file"

# -------------------------
# Step 3: Correlation calculations (Pearson)
# -------------------------
awk -F'\t' '
function pearson(n, sx, sy, sxy, sxx, syy) {
    num = n * sxy - sx * sy
    den = sqrt((n * sxx - sx^2) * (n * syy - sy^2))
    return (den == 0 ? 0 : num / den)
}
# For each row, accumulate sums for Pearson calculation
NR > 1 && $3 != "" && $9 != "" {
    y = $9                     # average rating
    x1 = $3                    # year
    x2 = $11                   # complexity

    sx1 += x1; sy1 += y; sxy1 += x1*y; sxx1 += x1^2; syy1 += y^2   # Sums for year/rating
    sx2 += x2; sy2 += y; sxy2 += x2*y; sxx2 += x2^2; syy2 += y^2   # Sums for complexity/rating
    n++
}
END {
    # Output Pearson correlation results
    printf "The correlation between the year of publication and the average rating is %.3f\n", pearson(n, sx1, sy1, sxy1, sxx1, syy1)
    printf "The correlation between the complexity of a game and its average rating is %.3f\n", pearson(n, sx2, sy2, sxy2, sxx2, syy2)
}' "$file"